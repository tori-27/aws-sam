AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  diplom-sam-app — Orders, Products, TenantManagement (TS)

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs22.x
    Tracing: Active
    LoggingConfig: { LogFormat: JSON }
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  PlatinumTierApiKey:
    Type: String
    Default: "PLATINUM-KEY-DEV"
  PremiumTierApiKey:
    Type: String
    Default: "PREMIUM-KEY-DEV"
  StandardTierApiKey:
    Type: String
    Default: "STANDARD-KEY-DEV"
  BasicTierApiKey:
    Type: String
    Default: "BASIC-KEY-DEV"

Resources:
  ########################
  # DynamoDB (orders/products)
  ########################
  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrderTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: shardId, AttributeType: S }
        - { AttributeName: orderId, AttributeType: S }
      KeySchema:
        - { AttributeName: shardId, KeyType: HASH }
        - { AttributeName: orderId, KeyType: RANGE }

  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ProductTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: shardId, AttributeType: S }
        - { AttributeName: productId, AttributeType: S }
      KeySchema:
        - { AttributeName: shardId, KeyType: HASH }
        - { AttributeName: productId, KeyType: RANGE }

  ########################
  # DynamoDB (tenant mgmt)
  ########################
  SettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ServerlessSaaS-Settings
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: settingName, AttributeType: S }
      KeySchema:
        - { AttributeName: settingName, KeyType: HASH }

  TenantDetailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ServerlessSaaS-TenantDetails
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: tenantId, AttributeType: S }
        - { AttributeName: tenantName, AttributeType: S }
      KeySchema:
        - { AttributeName: tenantId, KeyType: HASH }
      GlobalSecondaryIndexes:
        - IndexName: ServerlessSaas-TenantConfig
          KeySchema:
            - { AttributeName: tenantName, KeyType: HASH }
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes: [userPoolId, appClientId, apiGatewayUrl]

  TenantUserMappingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ServerlessSaaS-TenantUserMapping
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: tenantId, AttributeType: S }
        - { AttributeName: userName, AttributeType: S }
      KeySchema:
        - { AttributeName: tenantId, KeyType: HASH }
        - { AttributeName: userName, KeyType: RANGE }
      GlobalSecondaryIndexes:
        - IndexName: UserName
          KeySchema:
            - { AttributeName: userName, KeyType: HASH }
            - { AttributeName: tenantId, KeyType: RANGE }
          Projection: { ProjectionType: ALL }

  ########################
  # Cognito (pooled tenant)
  ########################
  PooledUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: PooledTenant-ServerlessSaaSUserPool
      AutoVerifiedAttributes: [email]
      Schema:
        - {
            Name: email,
            AttributeDataType: String,
            Required: true,
            Mutable: true,
          }
        - { Name: tenantId, AttributeDataType: String, Mutable: true }
        - { Name: userRole, AttributeDataType: String, Mutable: true }

  PooledUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ServerlessSaaSClient
      GenerateSecret: false
      UserPoolId: !Ref PooledUserPool
      AllowedOAuthFlowsUserPoolClient: false

  ########################
  # Orders — Lambdas & API
  ########################
  GetOrder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/OrderService
      Handler: handlers.getOrderHandler
      Events:
        {
          ApiGet:
            { Type: Api, Properties: { Path: "/order/{id}", Method: get } },
        }
      Environment: { Variables: { ORDER_TABLE_NAME: !Ref OrderTable } }
      Policies:
        - DynamoDBReadPolicy: { TableName: !Ref OrderTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  DeleteOrder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/OrderService
      Handler: handlers.deleteOrderHandler
      Events:
        {
          ApiDel:
            { Type: Api, Properties: { Path: "/order/{id}", Method: delete } },
        }
      Environment: { Variables: { ORDER_TABLE_NAME: !Ref OrderTable } }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref OrderTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  UpdateOrder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/OrderService
      Handler: handlers.updateOrderHandler
      Events:
        {
          ApiPut:
            { Type: Api, Properties: { Path: "/order/{id}", Method: put } },
        }
      Environment: { Variables: { ORDER_TABLE_NAME: !Ref OrderTable } }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref OrderTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  CreateOrder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/OrderService
      Handler: handlers.createOrderHandler
      Events:
        { ApiPost: { Type: Api, Properties: { Path: /order, Method: post } } }
      Environment: { Variables: { ORDER_TABLE_NAME: !Ref OrderTable } }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref OrderTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  GetAllOrders:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/OrderService
      Handler: handlers.getAllOrdersHandler
      Events:
        { ApiGetAll: { Type: Api, Properties: { Path: /orders, Method: get } } }
      Environment: { Variables: { ORDER_TABLE_NAME: !Ref OrderTable } }
      Policies:
        - DynamoDBReadPolicy: { TableName: !Ref OrderTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  ########################
  # Products — Lambdas & API
  ########################
  GetProduct:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ProductService
      Handler: handlers.getProductHandler
      Events:
        {
          ApiGet:
            { Type: Api, Properties: { Path: "/product/{id}", Method: get } },
        }
      Environment: { Variables: { PRODUCT_TABLE_NAME: !Ref ProductTable } }
      Policies:
        - DynamoDBReadPolicy: { TableName: !Ref ProductTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  DeleteProduct:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ProductService
      Handler: handlers.deleteProductHandler
      Events:
        {
          ApiDel:
            {
              Type: Api,
              Properties: { Path: "/product/{id}", Method: delete },
            },
        }
      Environment: { Variables: { PRODUCT_TABLE_NAME: !Ref ProductTable } }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref ProductTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  UpdateProduct:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ProductService
      Handler: handlers.updateProductHandler
      Events:
        {
          ApiPut:
            { Type: Api, Properties: { Path: "/product/{id}", Method: put } },
        }
      Environment: { Variables: { PRODUCT_TABLE_NAME: !Ref ProductTable } }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref ProductTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  CreateProduct:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ProductService
      Handler: handlers.createProductHandler
      Events:
        { ApiPost: { Type: Api, Properties: { Path: /product, Method: post } } }
      Environment: { Variables: { PRODUCT_TABLE_NAME: !Ref ProductTable } }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref ProductTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  GetAllProductsFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ProductService
      Handler: handlers.getAllProductsHandler
      Events:
        {
          ApiGetAll:
            { Type: Api, Properties: { Path: /products, Method: get } },
        }
      Environment: { Variables: { PRODUCT_TABLE_NAME: !Ref ProductTable } }
      Policies:
        - DynamoDBReadPolicy: { TableName: !Ref ProductTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [handlers.ts],
          },
      }

  ########################
  # Tenant Management — Lambdas & API
  ########################

  # tenant-management.ts
  CreateTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-management.createTenant
      Events:
        { ApiPost: { Type: Api, Properties: { Path: /tenant, Method: post } } }
      Environment:
        Variables:
          TABLE_TENANT_DETAILS: !Ref TenantDetailsTable
          TABLE_SETTINGS: !Ref SettingsTable
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TenantDetailsTable }
        - DynamoDBReadPolicy: { TableName: !Ref SettingsTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-management.ts],
          },
      }

  GetTenantsFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-management.getTenants
      Events:
        {
          ApiGetAll: { Type: Api, Properties: { Path: /tenants, Method: get } },
        }
      Environment:
        {
          Variables:
            {
              TABLE_TENANT_DETAILS: !Ref TenantDetailsTable,
              TABLE_SETTINGS: !Ref SettingsTable,
            },
        }
      Policies:
        - DynamoDBReadPolicy: { TableName: !Ref TenantDetailsTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-management.ts],
          },
      }

  UpdateTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-management.updateTenant
      Events:
        {
          ApiPut:
            {
              Type: Api,
              Properties: { Path: "/tenant/{tenantid}", Method: put },
            },
        }
      Environment:
        {
          Variables:
            {
              TABLE_TENANT_DETAILS: !Ref TenantDetailsTable,
              TABLE_SETTINGS: !Ref SettingsTable,
            },
        }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TenantDetailsTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-management.ts],
          },
      }

  GetTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-management.getTenant
      Events:
        {
          ApiGet:
            {
              Type: Api,
              Properties: { Path: "/tenant/{tenantid}", Method: get },
            },
        }
      Environment:
        {
          Variables:
            {
              TABLE_TENANT_DETAILS: !Ref TenantDetailsTable,
              TABLE_SETTINGS: !Ref SettingsTable,
            },
        }
      Policies:
        - DynamoDBReadPolicy: { TableName: !Ref TenantDetailsTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-management.ts],
          },
      }

  ActivateTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-management.activateTenant
      Events:
        {
          ApiPut:
            {
              Type: Api,
              Properties:
                { Path: "/tenant/activation/{tenantid}", Method: put },
            },
        }
      Environment:
        {
          Variables:
            {
              TABLE_TENANT_DETAILS: !Ref TenantDetailsTable,
              TABLE_SETTINGS: !Ref SettingsTable,
            },
        }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TenantDetailsTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-management.ts],
          },
      }

  DeactivateTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-management.deactivateTenant
      Events:
        {
          ApiDel:
            {
              Type: Api,
              Properties: { Path: "/tenant/{tenantid}", Method: delete },
            },
        }
      Environment:
        {
          Variables:
            {
              TABLE_TENANT_DETAILS: !Ref TenantDetailsTable,
              TABLE_SETTINGS: !Ref SettingsTable,
            },
        }
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TenantDetailsTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-management.ts],
          },
      }

  LoadTenantConfigFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-management.loadTenantConfig
      Events:
        {
          ApiGet:
            {
              Type: Api,
              Properties: { Path: "/tenant/init/{tenantname}", Method: get },
            },
        }
      Environment:
        {
          Variables:
            {
              TABLE_TENANT_DETAILS: !Ref TenantDetailsTable,
              TABLE_SETTINGS: !Ref SettingsTable,
            },
        }
      Policies:
        - DynamoDBReadPolicy: { TableName: !Ref TenantDetailsTable }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-management.ts],
          },
      }

  # tenant-registration.ts
  RegisterTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-registration.registerTenant
      Events:
        {
          ApiPost:
            { Type: Api, Properties: { Path: /registration, Method: post } },
        }
      Environment:
        Variables:
          PLATINUM_TIER_API_KEY: !Ref PlatinumTierApiKey
          PREMIUM_TIER_API_KEY: !Ref PremiumTierApiKey
          STANDARD_TIER_API_KEY: !Ref StandardTierApiKey
          BASIC_TIER_API_KEY: !Ref BasicTierApiKey
          CREATE_TENANT_ADMIN_USER_RESOURCE_PATH: "/user/tenant-admin"
          CREATE_TENANT_RESOURCE_PATH: "/tenant"
          PROVISION_TENANT_RESOURCE_PATH: "/provisioning"
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-registration.ts],
          },
      }

  # user-management.ts
  CreateTenantAdminUserFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: user-management.createTenantAdminUser
      Events:
        {
          ApiPost:
            {
              Type: Api,
              Properties: { Path: /user/tenant-admin, Method: post },
            },
        }
      Environment:
        Variables:
          TENANT_USER_POOL_ID: !Ref PooledUserPool
          TENANT_APP_CLIENT_ID: !Ref PooledUserPoolClient
          TABLE_TENANT_USER_MAPPING: !Ref TenantUserMappingTable
          TABLE_TENANT_DETAILS: !Ref TenantDetailsTable
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: "*"
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [user-management.ts],
          },
      }

  GetUsersFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: user-management.getUsers
      Events:
        { ApiGet: { Type: Api, Properties: { Path: /users, Method: get } } }
      Environment:
        Variables:
          TENANT_USER_POOL_ID: !Ref PooledUserPool
      Policies:
        - Statement:
            - Effect: Allow
              Action: [cognito-idp:ListUsers]
              Resource: "*"
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [user-management.ts],
          },
      }

  DisableUsersByTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: user-management.disableUsersByTenant
      Events:
        {
          ApiPut:
            { Type: Api, Properties: { Path: /users/disable, Method: put } },
        }
      Environment:
        Variables:
          TABLE_TENANT_USER_MAPPING: !Ref TenantUserMappingTable
      Policies:
        - DynamoDBReadPolicy: { TableName: !Ref TenantUserMappingTable }
        - Statement:
            - Effect: Allow
              Action: [cognito-idp:AdminDisableUser]
              Resource: "*"
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [user-management.ts],
          },
      }

  # (опціонально) tenant-provisioning.ts — якщо у файлі є ці експорти
  ProvisionTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-provisioning.provisionTenant
      Events:
        {
          ApiPost:
            { Type: Api, Properties: { Path: /provisioning, Method: post } },
        }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-provisioning.ts],
          },
      }

  DeProvisionTenantFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/TenantManagmentService
      Handler: tenant-provisioning.deprovisionTenant
      Events:
        {
          ApiPut:
            {
              Type: Api,
              Properties: { Path: "/provisioning/{tenantid}", Method: put },
            },
        }
    Metadata:
      {
        BuildMethod: esbuild,
        BuildProperties:
          {
            Minify: true,
            Target: es2020,
            Sourcemap: true,
            EntryPoints: [tenant-provisioning.ts],
          },
      }

  ########################
  # (Optional) App Insights
  ########################
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery: { Type: CLOUDFORMATION_STACK_1_0 }

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  ApiBaseUrl:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  SettingsTableName:
    Value: !Ref SettingsTable
  TenantDetailsTableName:
    Value: !Ref TenantDetailsTable
  TenantUserMappingTableName:
    Value: !Ref TenantUserMappingTable
  PooledUserPoolId:
    Value: !Ref PooledUserPool
  PooledUserPoolClientId:
    Value: !Ref PooledUserPoolClient
